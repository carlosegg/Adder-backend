<?xml version="1.0" encoding="UTF-8"?>
<!-- Generado con el arquetipo: standalone-archetype http://pimpam.googlecode.com -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- Identificador del componente -->
	<groupId>com.softwaresano.examples.calculator</groupId>
	<artifactId>web-calculator</artifactId>
	<version>0.0.3-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>web-calculator</name>
	<description>Calculadora web. En este ejemplo se utilizan test de aceptación con concordion</description>
	<organization>
		<name>${companyName}</name>
		<url>${companyUrl}</url>
	</organization>
	<url>${repoPublicSiteUrl}/com.softwaresano.examples.calculator/web-calculator
    </url>
	<licenses>
		<license>
			<name>GNU GENERAL PUBLIC LICENSE</name>
			<url>http://www.gnu.org/licenses/gpl-3.0.txt</url>
			<distribution>GPL 3.0</distribution>
		</license>
	</licenses>
	<developers>
		<developer>
			<id>carlosg</id>
			<name>Carlos Enrique Gómez Gómez</name>
			<email>carlosg@softwaresano.com</email>
			<roles>
				<role>developer</role>
			</roles>
			<organization>softwaresano.com</organization>
			<timezone>+1</timezone>
		</developer>
	</developers>
	<!-- Entorno de integración contínua -->
	<!-- [MODIFICAR] Añadir todos los correos a los que llegarán las notificaciones 
		de errores o solución de errores -->
	<ciManagement>
		<system>${continousIntegrationSystem}</system>
		<url>${continousIntegrationSystemUrl}job/web-calculator</url>
		<notifiers>
			<notifier>
				<type>mail</type>
				<sendOnError>true</sendOnError>
				<sendOnFailure>true</sendOnFailure>
				<sendOnSuccess>false</sendOnSuccess>
				<sendOnWarning>false</sendOnWarning>
				<configuration>
					<address>carlosg@softwaresano.com</address>
				</configuration>
			</notifier>
			<!-- notifier> <type>mail</type> <configuration> <address>usuario1@foo.com</address> 
				</configuration> </notifier> <notifier> <type>mail</type> <configuration> 
				<address>usuario2@foo.com</address> </configuration> </notifier -->
		</notifiers>
	</ciManagement>
	<!-- Configuración del SCM (SVN) -->
	<!-- [MODIFICAR] Poner las urls del SVN correspondiente, sin utilizar propiedades -->
	<scm>
		<connection>scm:svn:http://pimpam.googlecode.com/svn/trunk/web-calculator</connection>
		<developerConnection>scm:svn:https://pimpam.googlecode.com/svn/trunk/web-calculator</developerConnection>
		<url>http://pimpam.googlecode.com/svn/trunk/web-calculator</url>
	</scm>
	<build>
		<finalName>${project.artifactId}</finalName>
		<!-- Propiedades del proyecto dependendientes del entorno -->
		<filters>
			<filter>src/main/filters/${env}.properties</filter> <!-- Para un entorno en concreto -->
		</filters>
		<!-- Recursos sobre los que se van a aplicar los filtros -->
		<resources>
			<resource>
				<!-- Sólo se filtran los contenidos textuales. Si se filtra una imagen(*.png,*.gif), 
					está quedará corrupta -->
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.xml</include>
					<include>**/*.txt</include>
					<include>**/*.properties</include>
				</includes>
			</resource>
			<resource>
				<!-- El contenido textual ya se ha añadido y filtrado en el paso anterior -->
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.xml</exclude>
					<exclude>**/*.txt</exclude>
					<exclude>**/*.properties</exclude>
				</excludes>
			</resource>
		</resources>
		<plugins>
			<!-- integración con SVN -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-scm-plugin</artifactId>
				<version>1.3</version>
				<configuration>
					<goals>install</goals>
					<checkoutDirectory>${scmCheckoutDirectory}</checkoutDirectory>
					<tagBase>https://pimpam.googlecode.com/svn/tags</tagBase>
				</configuration>
			</plugin>
			<!-- Generar una release. Es necesario tener instalado un cliente de SVN -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.2.2</version>
				<configuration>
					<tagBase>https://pimpam.googlecode.com/svn/tags</tagBase>
				</configuration>
			</plugin>
			<!-- Plugin HUDSON -->
			<plugin>
				<groupId>org.jvnet.hudson.tools</groupId>
				<artifactId>maven-hudson-plugin</artifactId>
				<version>2.0-alpha-4</version>
				<configuration>
					<subversionURL>http://pimpam.googlecode.com/svn/trunk/${project.artifactId}</subversionURL>
					<includeCobertura>false</includeCobertura>
					<!-- Cada vez que se actualice el proyecto en hudson se contruirá el 
						site -->
					<additionalGoals>site:site site:deploy</additionalGoals>
					<!-- Para añadir la integración con sonar. Añadir org.codehaus.sonar:sonar-maven-plugin:1.8:sonar -->
				</configuration>
			</plugin>
			<!-- modificar las opciones del compilador -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>${jvm.version}</source>
					<target>${jvm.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<debug>${compilerInfoDebug}</debug>
					<optimize>${compilerOptimize}</optimize>
					<showWarnings>${compilerShowWarnings}</showWarnings>
					<showDeprecation>${compilerShowDeprecation}</showDeprecation>
					<verbose>${compilerVerbose}</verbose>
				</configuration>
			</plugin>
			<!-- Generación de test -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<executions>
					<execution>
						<id>unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>

							<excludes>
								<exclude>**/test/acceptance/**</exclude>
								<exclude>**/test/utils/**</exclude>
							</excludes>
							<includes>
								<include>**/test/Component.java</include>
							</includes>
						</configuration>

					</execution>
					<execution>
						<id>it-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>test</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>**/test/Component.java</exclude>
							</excludes>
							<includes>
								<include>**/test/acceptance/*.java</include>
							</includes>
							<systemPropertyVariables>
								<concordion.output.dir>target/site/concordion</concordion.output.dir>
							</systemPropertyVariables>

						</configuration>
					</execution>

				</executions>
			</plugin>
			<plugin>
				<!-- En modo SNAPSHOT se hace coincidir con el número de revisión del 
					SVN -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<doCheck>false</doCheck>
					<doUpdate>true</doUpdate>
				</configuration>
			</plugin>
			<!-- Enviar un mail con las releases notes descritas en el src/changes/changes.xml -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changes-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>changes-report</goal>
							<goal>announcement-generate</goal>
						</goals>
						<id>announcement-generate</id>
					</execution>
					<execution>
						<phase>release</phase>
						<goals>
							<goal>announcement-mail</goal>
						</goals>
						<id>announcement-mail</id>
					</execution>
				</executions>
				<!-- [MODIFICAR] Modificar la configuración del servidor de correo, así 
					como quién envía el correo y quiénes lo reciben. -->
				<configuration>
					<mailSender>
						<name>Carlos E. Gómez</name>
						<email>carlosg@softwaresano.com</email>
					</mailSender>
					<smtpHost>mailhost.hi.inet</smtpHost>
					<toAddresses>
						<toAddress implementation="java.lang.String">carlosg@softwaresano.com</toAddress>
					</toAddresses>
				</configuration>
			</plugin>
			<!-- Cobertura de los test -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin
                </artifactId>
				<version>2.5.1</version>
				<configuration>
					<check>
						<haltOnFailure>false</haltOnFailure>
					</check>
					<instrumentation>
						<excludes>
							<exclude>**/main/Bootstrap.class</exclude>
						</excludes>
					</instrumentation>
				</configuration>
				<executions>
					<execution>
						<id>clean</id>
						<phase>pre-site</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
					<execution>
						<id>instrument</id>
						<phase>site</phase>
						<goals>
							<goal>instrument</goal>
							<goal>cobertura</goal>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!--Agregador de informes -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>dashboard-maven-plugin
                </artifactId>
				<version>1.0.0-beta-1</version>
			</plugin>
			<!-- Plugin para generar los javadocs -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.7</version>
				<executions>
					<execution>
						<id>aggregate</id>
						<goals>
							<goal>aggregate</goal>
						</goals>
						<phase>site</phase>
						<configuration>
							<!-- Specific configuration for the aggregate report -->

						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.cargo</groupId>
				<artifactId>cargo-maven2-plugin</artifactId>
				<version>1.1.2</version>
				<configuration>
					<container>
						<containerId>tomcat7x</containerId>
						<zipUrlInstaller>
							<url>http://apache.rediris.es/tomcat/tomcat-7//v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip</url>
						</zipUrlInstaller>
					</container>
					<configuration>
						<properties>
							<cargo.servlet.port>8080</cargo.servlet.port>
							<cargo.tomcat.ajp.port>8109</cargo.tomcat.ajp.port>
							<cargo.jvmargs>-javaagent:${settings.localRepository}/org/jacoco/org.jacoco.agent/${jacoco.agent.version}/org.jacoco.agent-${jacoco.agent.version}-runtime.jar=destfile=${project.build.directory}/itest.jacoco</cargo.jvmargs>
						</properties>


					</configuration>
				</configuration>
				<executions>
					<!-- start server before integration tests -->
					<execution>
						<id>start-container</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<!-- stop server after integration tests -->
					<execution>
						<id>stop-container</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>rpm-maven-plugin</artifactId>
				<version>2.1-alpha-1</version>
				<extensions>true</extensions>
				<configuration>
					<!-- Basics -->
					<release>r${buildNumber}</release>
					<group>None</group>
					<packager>${project.organization.name}</packager>
					<!-- TODO Required rpms -->
					<requires>
						<require>tomcat6-webapps</require>
					</requires>

					<!-- Define Statements -->
					<defineStatements>
                                <defineStatement>scm_rev r${buildNumber}</defineStatement>

                                <defineStatement>_rpm_name %{name}-%{version}_%{scm_rev}</defineStatement>

                                <!-- Tomcat related-staff definition -->
                                <defineStatement>tomcat_home ${tomcat.home}</defineStatement>

                                <!-- Error Statement -->
                                <defineStatement>_do_check ERROR_VALUE=`echo $?`;if [ $ERROR_VALUE != "0" ]; then exit -1;fi</defineStatement>

                                <!-- RPM Build Log definition -->
                                <defineStatement>_rpm_build_log_dir ${project.build.directory}/log/rpms</defineStatement>
                                <defineStatement>_rpm_build_log_create_dir mkdir -p %{_rpm_build_log_dir}</defineStatement>
                                <defineStatement>_rpm_build_log_file &gt;&gt; %{_rpm_build_log_dir}/%{_rpm_name}.log</defineStatement>
                                <defineStatement>_rpm_build_log echo -e "[$(date +'%Y-%m-%d %T')] [%{_rpm_name}]"</defineStatement>

                                <!-- RPM Execution Log definition -->
                                <defineStatement>_rpm_execution_log_dir /var/log/rpms</defineStatement>
                                <defineStatement>_rpm_execution_log_file &gt;&gt; %{_rpm_execution_log_dir}/%{_rpm_name}.log</defineStatement>
                                <defineStatement>_rpm_execution_log echo -e "[$(date +'%Y-%m-%d %T')] [%{_rpm_name}]"</defineStatement>

                                <!-- Log helper commands -->
                                <defineStatement>_log_init "==== INIT ===="</defineStatement>
                                <defineStatement>_log_end  "==== END ===="</defineStatement>

                                <!-- Preparation Log helper commands -->
                                <defineStatement>_log_prep_echo %{_rpm_build_log} [PREP]</defineStatement>
                                <defineStatement>_log_prep_init %{_log_prep_echo} %{_log_init} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_prep_end %{_log_prep_echo} %{_log_end} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_prep %{_log_prep_echo} %{_log_end} %{_rpm_build_log_file}</defineStatement>

                                <!-- Clean Log helper commands -->
                                <defineStatement>_log_clean_echo %{_rpm_build_log} [CLEAN]</defineStatement>
                                <defineStatement>_log_clean_init %{_log_clean_echo} %{_log_init} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_clean_end %{_log_clean_echo} %{_log_end} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_clean %{_log_clean_echo} %{_log_end} %{_rpm_build_log_file}</defineStatement>

                                <!-- Build Log helper commands -->
                                <defineStatement>_log_build_echo %{_rpm_build_log} [BUILD]</defineStatement>
                                <defineStatement>_log_build_init %{_log_build_echo} %{_log_init} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_build_end %{_log_build_echo} %{_log_end} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_build %{_log_build_echo} %{_rpm_build_log_file}</defineStatement>

                                <!-- Install Log helper commands -->
                                <defineStatement>_log_install_echo %{_rpm_build_log} [INSTALL]</defineStatement>
                                <defineStatement>_log_install_init %{_log_install_echo} %{_log_init} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_install_end %{_log_install_echo} %{_log_end} %{_rpm_build_log_file}</defineStatement>
                                <defineStatement>_log_install %{_log_install_echo} %{_rpm_build_log_file}</defineStatement>

                                <!-- Pre-Install Log helper commands -->
                                <defineStatement>_log_pre_echo %{_rpm_execution_log} [PRE-INSTALL]</defineStatement>
                                <defineStatement>_log_pre_init %{_log_pre_echo} %{_log_init} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_pre_end %{_log_pre_echo} %{_log_end} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_pre %{_log_pre_echo} %{_rpm_execution_log_file}</defineStatement>

                                <!-- Post-Install Log helper commands -->
                                <defineStatement>_log_post_echo %{_rpm_execution_log} [POST-INSTALL]</defineStatement>
                                <defineStatement>_log_post_init %{_log_post_echo} %{_log_init} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_post_end %{_log_post_echo} %{_log_end} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_post %{_log_post_echo} %{_rpm_execution_log_file}</defineStatement>

                                <!-- Pre-Uninstall Log helper commands -->
                                <defineStatement>_log_preun_echo %{_rpm_execution_log} [PRE-UNINSTALL]</defineStatement>
                                <defineStatement>_log_preun_init %{_log_preun_echo} %{_log_init} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_preun_end %{_log_preun_echo} %{_log_end} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_preun %{_log_preun_echo} %{_rpm_execution_log_file}</defineStatement>

                                <!-- Post-Uninstall Log helper commands -->
                                <defineStatement>_log_postun_echo %{_rpm_execution_log} [POST-UNINSTALL]</defineStatement>
                                <defineStatement>_log_postun_init %{_log_postun_echo} %{_log_init} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_postun_end %{_log_postun_echo} %{_log_end} %{_rpm_execution_log_file}</defineStatement>
                                <defineStatement>_log_postun %{_log_postun_echo} %{_rpm_execution_log_file}</defineStatement>
                            </defineStatements>

					<!-- Build time scripts -->

					<prepareScriptlet>
						<scriptFile>src/main/rpm/scripts/prepare.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</prepareScriptlet>

					<installScriptlet>
						<scriptFile>src/main/rpm/scripts/install.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</installScriptlet>

					<cleanScriptlet>
						<scriptFile>src/main/rpm/scripts/clean.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</cleanScriptlet>

					<!-- Install and uninstall time scripts -->

					<preinstallScriptlet>
						<scriptFile>src/main/rpm/scripts/preinstall.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</preinstallScriptlet>

					<postinstallScriptlet>
						<scriptFile>src/main/rpm/scripts/postinstall.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</postinstallScriptlet>

					<preremoveScriptlet>
						<scriptFile>src/main/rpm/scripts/preremove.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</preremoveScriptlet>

					<postremoveScriptlet>
						<scriptFile>src/main/rpm/scripts/postremove.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</postremoveScriptlet>

					<!-- Verify command -->

					<verifyScriptlet>
						<scriptFile>src/main/rpm/scripts/common/verify.sh</scriptFile>
						<fileEncoding>${project.encoding}</fileEncoding>
					</verifyScriptlet>


					<name>${project.name}</name>
					<defaultDirmode>775</defaultDirmode>
					<defaultFilemode>664</defaultFilemode>
					<defaultGroupname>tomcat</defaultGroupname>
					<defaultUsername>tomcat</defaultUsername>
					<mappings>
						<mapping>
							<directory> /var/lib/tomcat6/webapps</directory>
							<sources>
								<source>
									<location>${project.build.directory}/${project.artifactId}.war</location>
								</source>
							</sources>
						</mapping>
					</mappings>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jdepend-maven-plugin</artifactId>
				<version>2.0-beta-2</version>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<!-- Dependencias internas -->

		<!-- Dependencias externas -->
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
			<scope>compile</scope>
			<exclusions>
				<exclusion>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>logkit</groupId>
					<artifactId>logkit</artifactId>
				</exclusion>
				<exclusion>
					<groupId>avalon-framework</groupId>
					<artifactId>avalon-framework</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
			<scope>runtime</scope>
			<exclusions>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.activation</groupId>
					<artifactId>activation</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Dependencias de test -->
		<dependency>
			<groupId>org.jmock</groupId>
			<artifactId>jmock</artifactId>
			<version>${jmock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jmock</groupId>
			<artifactId>jmock-junit4</artifactId>
			<version>${jmock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jmock</groupId>
			<artifactId>jmock-legacy</artifactId>
			<version>${jmock.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<!-- Necesaria para las librerías de test que funcionen con otra versión 
			de JUNIT por ejemplo spring-test funciona con JUNIT 3.8.1 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit-dep</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.agent</artifactId>
			<version>0.5.4.201111111111</version>
			<classifier>runtime</classifier>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.sourceforge.cobertura</groupId>
			<artifactId>cobertura</artifactId>
			<version>1.9.4.1</version>
			<scope>provided</scope>
			<!-- Workaround para el plugin de cobertura -->
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.concordion</groupId>
			<artifactId>concordion</artifactId>
			<version>1.3.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>${seleniumserver.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium.client-drivers</groupId>
			<artifactId>selenium-java-client-driver</artifactId>
			<version>1.0.2</version>
			<scope>test</scope>
		</dependency>


	</dependencies>
	<distributionManagement>
		<!-- Repositorio para hacer el deploy de las releases -->
		<repository>
			<id>${repoMavenId}</id>
			<name>${repoMavenName}</name>
			<url>${repoMavenUrl}</url>
		</repository>
		<!-- Repositorio de snapshot -->
		<snapshotRepository>
			<id>${repoMavenSnapshotId}</id>
			<name>${repoMavenSnapshotName}</name>
			<url>${repoMavenSnapshotUrl}</url>
		</snapshotRepository>
		<!-- Máquina donde se publica el site del proyecto -->
		<site>
			<id>${repoSiteId}</id>
			<name>${repoSiteName}</name>
			<url>${repoSiteUrl}/${project.groupId}/${project.artifactId}</url>
		</site>
	</distributionManagement>
	<profiles>
		<!-- Profile desarrollo (Activo por defecto) -->
		<profile>
			<id>development</id>
			<activation>
				<activeByDefault>true</activeByDefault>
				<file>
					<!-- This employs that the basedir expression is only recognized by 
						Maven 3.x (see MNG-2363) -->
					<exists>${basedir}</exists>
				</file>

			</activation>
			<properties>
				<env>development</env>
				<compilerInfoDebug>true</compilerInfoDebug>
				<compilerOptimize>false</compilerOptimize>
			</properties>
		</profile>
		<!-- Integración -->
		<profile>
			<id>integration</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<env>integration</env>
				<compilerInfoDebug>true</compilerInfoDebug>
				<compilerOptimize>false</compilerOptimize>
			</properties>
		</profile>
		<!-- Producción -->
		<profile>
			<id>production</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<env>production</env>
				<compilerInfoDebug>false</compilerInfoDebug>
				<compilerOptimize>true</compilerOptimize>
			</properties>
		</profile>
		<profile>
			<id>maven-2</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-site-plugin</artifactId>
							<version>2.0.1</version>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<artifactId>maven-site-plugin</artifactId>
						<configuration>
							<locales>es</locales>
							<outputEncoding>${project.reporting.outputEncoding}</outputEncoding>
							<inputEncoding>${project.build.sourceEncoding}</inputEncoding>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<reporting>
				<plugins>
					<!-- plugin para reports de sonar -->
					<plugin>
						<groupId>org.codehaus.sonar-plugins</groupId>
						<artifactId>maven-report</artifactId>
						<version>0.1</version>
					</plugin>



					<!-- Plugin para generar los referencias cruzadas del código -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jxr-maven-plugin</artifactId>
						<version>2.0-beta-1</version>
					</plugin>
					<!-- Plugin para generar los informes de entregas al SVN por desarrollador -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>changelog-maven-plugin</artifactId>
						<version>2.0-beta-1</version>
					</plugin>
					<!-- Plugin para generar los reports de calidad de código. Faltaría 
						definir las métricas a aplicar -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-pmd-plugin</artifactId>
						<version>2.7</version>
						<configuration>
							<linkXref>true</linkXref>
							<sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
							<minimumTokens>100</minimumTokens>
							<targetJdk>${jvm.version}</targetJdk>
							<excludes>
								<exclude>**/pojos/*.java</exclude>
								<exclude>**/generated/*.java</exclude>
							</excludes>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>javancss-maven-plugin</artifactId>
						<version>2.0-beta-2</version>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jdepend-maven-plugin</artifactId>
						<version>2.0-beta-2</version>
					</plugin>

					<!-- Plugin para generar los informes del JUNIT -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-report-plugin</artifactId>
						<version>${maven-surefire-plugin.version}</version>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-project-info-reports-plugin</artifactId>
						<version>2.1.2</version>
					</plugin>
					<!-- Plugin para analizar las tags en el código, por ejemplo para generar 
						un informe con todos los TODO -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>taglist-maven-plugin</artifactId>
						<version>2.4</version>
						<configuration>
							<tags>
								<tag>TODO</tag>
								<tag>FIXME</tag>
								<tag>@todo</tag>
								<tag>@deprecated</tag>
							</tags>
						</configuration>
					</plugin>
					<!-- Plugin para generar el control de cambios -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-changes-plugin</artifactId>
						<version>2.6</version>
						<reportSets>
							<reportSet>
								<reports>
									<report>changes-report</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
					<!-- Plugin para generar informes de calidad del código -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-checkstyle-plugin</artifactId>
						<version>2.8</version>
					</plugin>
					<!-- Genera los informes de Cobertura de los Test -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>cobertura-maven-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<formats>
								<format>xml</format>
								<format>html</format>
							</formats>
						</configuration>
					</plugin>
					<!-- Genera una agregación de informes -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>dashboard-maven-plugin</artifactId>
						<version>1.0.0-beta-1</version>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jdepend-maven-plugin</artifactId>
						<version>2.0-beta-2</version>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>2.7</version>
						<configuration>
							<!-- Default configuration for all reports -->
						</configuration>
						<reportSets>
							<reportSet>
								<id>aggregate</id>
								<configuration>
									<!-- Specific configuration for the aggregate report -->
								</configuration>
								<reports>
									<report>aggregate</report>
								</reports>
							</reportSet>
						</reportSets>
					</plugin>
				</plugins>
			</reporting>
		</profile>

		<profile>
			<id>maven-3</id>
			<activation>
				<file>
					<!-- This employs that the basedir expression is only recognized by 
						Maven 3.x (see MNG-2363) -->
					<exists>${basedir}</exists>
				</file>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.apache.maven.plugins</groupId>
							<artifactId>maven-site-plugin</artifactId>
							<version>3.0</version>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<artifactId>maven-site-plugin</artifactId>
						<configuration>
							<locales>es</locales>
							<outputEncoding>${project.reporting.outputEncoding}</outputEncoding>
							<inputEncoding>${project.build.sourceEncoding}</inputEncoding>

							<reportPlugins>
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-project-info-reports-plugin</artifactId>
									<version>2.4</version>
									<configuration>
										<dependencyDetailsEnabled>false</dependencyDetailsEnabled>
										<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
									</configuration>
								</plugin>
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-javadoc-plugin</artifactId>
									<version>2.8</version>
								</plugin>
								<!-- plugin para reports de sonar -->
								<plugin>
									<groupId>org.codehaus.sonar-plugins</groupId>
									<artifactId>maven-report</artifactId>
									<version>0.1</version>
								</plugin>
								<!-- Plugin para generar los referencias cruzadas del código -->
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-jxr-plugin</artifactId>
									<version>2.3</version>
								</plugin>
								<!-- Plugin para generar los informes de entregas al SVN por desarrollador -->
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-changelog-plugin</artifactId>
									<version>2.2</version>
								</plugin>
								<!-- Plugin para generar los reports de calidad de código. Faltaría 
									definir las métricas a aplicar -->
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-pmd-plugin</artifactId>
									<version>2.6</version>
									<configuration>
										<linkXref>true</linkXref>
										<sourceEncoding>${project.build.sourceEncoding}</sourceEncoding>
										<minimumTokens>100</minimumTokens>
										<targetJdk>${jvm.version}</targetJdk>
										<excludes>
											<exclude>**/pojos/*.java</exclude>
											<exclude>**/generated/*.java</exclude>
										</excludes>
									</configuration>
								</plugin>
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-plugin-plugin</artifactId>
									<version>2.7</version>
								</plugin>
								<plugin>
									<groupId>org.codehaus.mojo</groupId>
									<artifactId>javancss-maven-plugin</artifactId>
									<version>2.0-beta-2</version>
								</plugin>
								<plugin>
									<groupId>org.codehaus.mojo</groupId>
									<artifactId>jdepend-maven-plugin</artifactId>
									<version>2.0-beta-2</version>
								</plugin>
								<!-- Plugin para generar los informes del JUNIT -->
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-surefire-report-plugin</artifactId>
									<version>${maven-surefire-plugin.version}</version>
								</plugin>
								<!-- Plugin para analizar las tags en el código, por ejemplo para 
									generar un informe con todos los TODO -->
								<plugin>
									<groupId>org.codehaus.mojo</groupId>
									<artifactId>taglist-maven-plugin</artifactId>
									<version>2.4</version>
									<configuration>
										<tags>
											<tag>TODO</tag>
											<tag>FIXME</tag>
											<tag>@todo</tag>
											<tag>@deprecated</tag>
										</tags>
									</configuration>
								</plugin>
								<!-- Plugin para generar el control de cambios -->
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-changes-plugin</artifactId>
									<version>2.6</version>
									<reportSets>
										<reportSet>
											<reports>
												<report>changes-report</report>
											</reports>
										</reportSet>
									</reportSets>
								</plugin>
								<!-- Plugin para generar informes de calidad del código -->
								<plugin>
									<groupId>org.apache.maven.plugins</groupId>
									<artifactId>maven-checkstyle-plugin</artifactId>
									<version>2.8</version>
								</plugin>
								<!-- Genera los informes de Cobertura de los Test -->
								<plugin>
									<groupId>org.codehaus.mojo</groupId>
									<artifactId>cobertura-maven-plugin</artifactId>
									<version>2.5.1</version>
									<configuration>
										<formats>
											<format>xml</format>
											<format>html</format>
										</formats>
									</configuration>
								</plugin>
							</reportPlugins>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>
		<profile>
			<id>stat-scm</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<pluginRepositories>
				<pluginRepository>
					<id>stat-scm</id>
					<name>stat-scm</name>
					<url>http://stat-scm.sourceforge.net/maven2/</url>
				</pluginRepository>
			</pluginRepositories>
		</profile>
	</profiles>
	<repositories>
		<repository>
			<id>central</id>
			<name>central-repository</name>
			<url>http://repo1.maven.org/maven2</url>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>central</id>
			<name>central-repository</name>
			<url>http://repo1.maven.org/maven2</url>
		</pluginRepository>
		<pluginRepository>
			<id>java.net</id>
			<name>java.net</name>
			<url>http://download.java.net/maven/2/</url>
		</pluginRepository>
		<pluginRepository>
			<id>stat-scm</id>
			<name>stat-scm</name>
			<url>http://stat-scm.sourceforge.net/maven2/</url>
		</pluginRepository>
		<pluginRepository>
			<id>codehaus</id>
			<name>codehaus</name>
			<url>http://repository.codehaus.org</url>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<!-- Forzamos a los plugins a utilizar UTF-8, para evitar problemas con 
			los encodings por defectos de los diferentes sistemas operativos -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<sonar.jacoco.itReportPath>${project.build.directory}/itest.jacoco</sonar.jacoco.itReportPath>
		<seleniumserver.version>2.21.0</seleniumserver.version>
		<tomcat.version>7.0.27</tomcat.version>
		<jacoco.agent.version>0.5.4.201111111111</jacoco.agent.version>
		<copyright.year>2012</copyright.year>
		<junit.version>4.10</junit.version>
		<jmock.version>2.5.1</jmock.version>
		<jvm.version>1.5</jvm.version>
		<tomcat.rpm.version>6</tomcat.rpm.version>
		<maven-surefire-plugin.version>2.12</maven-surefire-plugin.version>
		<tomcat.home>/usr/share/tomcat${tomcat.rpm.version}</tomcat.home>
	</properties>
</project>

